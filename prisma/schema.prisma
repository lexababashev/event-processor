datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Source {
  facebook
  tiktok
}

enum FunnelStage {
  top
  bottom
}

enum Gender {
  male
  female
  non_binary
}

enum FacebookReferrer {
  newsfeed
  marketplace
  groups
}

enum ClickPosition {
  top_left
  bottom_right
  center
}

enum Device {
  mobile
  desktop
}

enum Browser {
  Chrome
  Firefox
  Safari
}

enum TiktokDevice {
  Android
  iOS
  Desktop
}

model Event {
  id            String       @id @default(uuid())
  eventId       String       // External event ID
  timestamp     DateTime
  source        Source
  funnelStage   FunnelStage
  eventType     String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  facebookEventData FacebookEventData?
  tiktokEventData   TiktokEventData?

  @@index([timestamp])
  @@index([source])
  @@index([funnelStage])
  @@map("events")
}

/**
 * Facebook-specific event data
 */
model FacebookEventData {
  id            String           @id @default(uuid())
  userId        String
  name          String
  age           Int
  gender        Gender
  locCountry    String
  locCity       String
  actionTime    DateTime?
  referrer      FacebookReferrer?
  videoId       String?
  adId          String?
  campaignId    String?
  clickPosition ClickPosition?
  device        Device?
  browser       Browser?
  purchaseAmount Decimal?

  // Relation back to Event
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @unique

  @@map("facebook_event_data")
}

/**
 * TikTok-specific event data
 */
model TiktokEventData {
  id               String        @id @default(uuid())
  userId           String
  username         String
  followers        Int
  watchTime        Int?
  percentageWatched Int?
  device           TiktokDevice?
  country          String?
  videoId          String?
  actionTime       DateTime?
  profileId        String?
  purchasedItem    String?
  purchaseAmount   Decimal?

  // Relation back to Event
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @unique  // Added @unique constraint

  @@map("tiktok_event_data")
}